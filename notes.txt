
SIMT
~~~~

Single Instruction Multiple Threads
The simplest way to understand SIMT is to imagine a multi-core system, where each core has its own register file, its own ALUs (both SIMD and Scalar) and its own data cache, but that unlike a standard multi-core system which has multiple independent instruction caches and decoders, as well as multiple independent Program Counter registers, the instructions are synchronously broadcast to all SIMT cores from a single unit with a single instruction cache and a single instruction decoder which reads instructions using a single Program Counter.

Since all Threads in a Warp execute the same instructions, branches result in 
extra code being unnecessarily executed.
For simple branches, predicated instructions are generated. These are not 
terrible for performance.
For complex branches, Threads for the "other" conditional are flagged and 
execute NOPs. This is the "branch divergence" penalty on CUDA.

SIMD
~~~~

Single Instruction Multiple Data

x64:
MMX (MultiMedia eXtensions)       64-bit %xmm0-%xmm7
SSE (Streaming SIMD Extensions)   128-bit %xmm0-%xmm7
SSE2                              128-bit %xmm0-%xmm15
AVX (Advanced Vector eXtensions)  256-bit %ymm0-%ymm15    
AVX-512                           512-bit %zmm0-%zmm31    EVEX prefix

Terms
~~~~~

Scalar: Single data type
Vector: Collection of scalar elements

Performance Toolkit
~~~~~~~~~~~~~~~~~~~

* Transformations (Vector Add, Matrix Multiply)
  - Grid Stride Loop
    Instead of starting a new thread, have the existing thread iterate over 
    the input vectors by Grid stride (gridDim * blockDim)
  - Shared Memory
    Use the faster Shared memory bank in each SP/Core to cache data common 
    to multiple threads. In Matrix Multiply, each thread iterates over (common) 
    rows and columns. If this is cached, the 32 threads have reduced memory 
    latency, and better thread occupancy.
* Reductions (Summing)
  - Binary Tree
    Each thread performs partial sum.
    . Grid Stride Loop to reduce problem to gridDim*blockDim
    . Shared Memory for caching between threads in the same block.

Shared memory:
~~~~~~~~~~~~~~

* Faster than global memory
* Shared memory bank in each core (48K)
* Useful for Matrix Multiply type transformations since each thread does 
  iteration, and having a common cache speeds up memory access for all threads 
  in a Warp / Thread Block (32 threads).

  Static shared memory:

    const int size = 48;
    __global__ void k(...) {
      __shared__ int temp[size];
      ...
    }
    k<<<grid, block>>>(...);

  Dynamic shared memory:

    __global__ void k(...) {
      __shared__ int temp[];
      ...
    }
    int shared_size_in_bytes = 192;
    k<<<grid, block, shared_size_in_bytes>>>(...);

Atomics
~~~~~~~

* Indivisible Read-modify-write; serialization
  o min/max
  o add/sub
  o inc/dec
  o and/or/xor
  o bitwise
  o exch/cas
* Uses:
  o Determine my place in an order
    int my_position = atomicAdd(order, 1);
  o Reserve space in a buffer
    int my_offset = atomicAdd(buffer_idx, my_dsize);

Reductions
~~~~~~~~~~

* Parallel reduction; Tree based approach
* Decompose into multiple kernels

Vector Types
~~~~~~~~~~~~

These are vector types derived from the basic integer and floating-point types. 
They are structures and the 1st, 2nd, 3rd, and 4th components are accessible 
through the fields x, y, z, and w, respectively. They all come with a 
constructor function of the form make_<type name>; for example,

int2 make_int2(int x, int y);

GPU Architecture
~~~~~~~~~~~~~~~~

Software      Hardware
--------      --------
Thread        Scalar Processor (SP) (Core)
Thread Block  Multiprocessor (SM, Streaming Multiprocessor)
Grid          Device (GPU)

Nvidia machine code: SASS stored in ELF
Nvidia IR: PTX (similar to LLVM IR)

32 Threads per Warp
64 Warps per SM
64 to 192 SMs per GPU

1024 Threads per Block; Threads should be a multiple of Threads/Warp (32)
64K Blocks per Grid

Note: Shared memory & L1 cache are different memory structures

Architecture Generations
~~~~~~~~~~~~~~~~~~~~~~~~

* Fermi SM
* Kepler SMX
* Maxwell/Pascal SMM
* Pascal/Volta (Tensor core)
* Turing
* Ampere

GeForce GT 650M
~~~~~~~~~~~~~~~

* CC3.0
* GK107
* Kepler Architecture
* CUDA Cores 384
* TMUs 32
* ROPs 16
* SMX Count 2
* Shared Memory 48K
* L1 Cache 16 KB (per SMX)
* L2 Cache 256 KB

nvprof
~~~~~~

# List events & metrics
% nvprof --query-events
% nvprof --query-metrics

# Get *all* events/metrics
% sudo nvprof --events all ...
% sudo nvprof --metrics all ...

# Trace GPU
% sudo nvprof --print-gpu-trace ...

cuobjdump
~~~~~~~~~

% cuobjdump -sass vectorAddGPU

Fatbin elf code:
================
arch = sm_30
code version = [1,7]
producer = <unknown>
host = linux
compile_size = 64bit

  code for sm_30

Fatbin elf code:
================
arch = sm_30
code version = [1,7]
producer = cuda
host = linux
compile_size = 64bit

  code for sm_30
    Function : _Z9vectorAddPKfS0_Pfi
  .headerflags    @"EF_CUDA_SM30 EF_CUDA_PTX_SM(EF_CUDA_SM30)"
                                                                                /* 0x2202e2c282823307 */
        /*0008*/                   MOV R1, c[0x0][0x44];                        /* 0x2800400110005de4 */
        /*0010*/                   S2R R0, SR_CTAID.X;                          /* 0x2c00000094001c04 */
        /*0018*/                   S2R R3, SR_TID.X;                            /* 0x2c0000008400dc04 */
        /*0020*/                   IMAD R0, R0, c[0x0][0x28], R3;               /* 0x20064000a0001ca3 */
        /*0028*/                   ISETP.GE.AND P0, PT, R0, c[0x0][0x158], PT;  /* 0x1b0e40056001dc23 */
        /*0030*/               @P0 EXIT;                                        /* 0x80000000000001e7 */
        /*0038*/                   ISCADD R2.CC, R0, c[0x0][0x140], 0x2;        /* 0x4001400500009c43 */
                                                                                /* 0x22c04282c04282b7 */
        /*0048*/                   MOV32I R7, 0x4;                              /* 0x180000001001dde2 */
        /*0050*/                   IMAD.HI.X R3, R0, R7, c[0x0][0x144];         /* 0x208e80051000dce3 */
        /*0058*/                   ISCADD R4.CC, R0, c[0x0][0x148], 0x2;        /* 0x4001400520011c43 */
        /*0060*/                   LD.E R2, [R2];                               /* 0x8400000000209c85 */
        /*0068*/                   IMAD.HI.X R5, R0, R7, c[0x0][0x14c];         /* 0x208e800530015ce3 */
        /*0070*/                   LD.E R4, [R4];                               /* 0x8400000000411c85 */
        /*0078*/                   ISCADD R6.CC, R0, c[0x0][0x150], 0x2;        /* 0x4001400540019c43 */
                                                                                /* 0x20000002f04283f7 */
        /*0088*/                   IMAD.HI.X R7, R0, R7, c[0x0][0x154];         /* 0x208e80055001dce3 */
        /*0090*/                   FADD R0, R4, R2;                             /* 0x5000000008401c00 */
        /*0098*/                   ST.E [R6], R0;                               /* 0x9400000000601c85 */
        /*00a0*/                   EXIT;                                        /* 0x8000000000001de7 */
        /*00a8*/                   BRA 0xa8;                                    /* 0x4003ffffe0001de7 */
        /*00b0*/                   NOP;                                         /* 0x4000000000001de4 */
        /*00b8*/                   NOP;                                         /* 0x4000000000001de4 */
    ................................



Fatbin ptx code:
================
arch = sm_30
code version = [6,0]
producer = cuda
host = linux
compile_size = 64bit
compressed

